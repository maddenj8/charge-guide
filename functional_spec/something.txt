# Technical Specification for ChargeGuide

#### Table of contents: 












































###### Overview: 1.1


ChargeGuide is a android application used to inform the user which chargers are working in use or broken. The user can then select a charger on a map and route with a estimate of state of charge on arrival and distance to the charger to it directly routing to those chargers directly. The user can also search for a destination and the application will select upto 3 possible routes each rout can contain upto 4 stops. The user can also configure what there state of charge is at the bottom of the main page and when the click on a charger. The user can then select one of these routes and open it up in google maps directly in navigation mode. There is also a brief help page explaining the chargers states and the different connectors. When the user first uses the app they can setup where they live and what car they drive so the app can estimate the range and only show applicable chargers.  

The charger information is gotten from pulling form a kml from the esb charge point cap. This kml file is then parsed into 3 files one for each charger. The application gets its information over ftp from dcu student.computing server.  This information is updated every 10 minutes.



###### Glossary 1.2:

Soc = State of charge
Chademo , CCS , AC43  , Chademo = Fast charge plugs




















#### 2 System Architecture

This section describes the high-level overview of the system architecture showing the distribution functions across (potential) system modules. Architectural components that are reused or 3rd party should be highlighted. Unlike the architecture in the Functional Specification  this description must reflect the design components of the system as it is demonstrated.


 The application is made up of get_charging_data.sh which wgets the kml file , split.py splits out the kml files into 3 files chademo ccs and ac. Parse.py pares out the kml file into the latitude longitude state and name spit by “|”. 

The main class for the application is MapMain.java.


Inside of MapMain.java there is downloadChargerInfo this uses sftp form the school of computing servers to pulls the appropriate file for the car and stores it on the device.  This is an external library from Java secure channel.

getDistance() gets the distance from a charger in km to home and getdistancetodestnation() gets the distance between any two coordinates.

pinDrop will open up the downloaded file and makes it a marker object and draws it on the map this will give a title when clicked on an gives the apporatpate icon.

 mMap.setOnInfoWindowClickListener checks to see if if destination updated is set if so it opens chargerInfo.class activity is opened otherwise it ignores the input.

 onNavigationItemSelected() listens for any click on the navigation drawer so it can start a the help or set up activity.

getDirectionUrl() makes a url that is used by startDirectionSetps to draw a path from home to the charger to the destination.

onmapReady() will position the camera with just ireland in frame and call pin drop and gets the users home location.  

getNext() charger will pick the chargers that are near to the chargers that are in range sort them in terms of distance to the destination.

addMarker() is given a marker and puts an icon on the map with the corresponding title and icon

route0 is a button for journeys with no need to stop and buttons 1 to  3 deal with routes with routes with waypoints

The charger info class has to display information about the charger when the charger icon is clicked.

Information about the charger is passed by a bundle from map main class.

Using the battery size in kwh’s and the state of charge percentage it will estimate the range in km and the charge time. This is then displayed to the user. There is a button that will open google maps in navigation mode passing the charger as the destination.

The onCreate has getting a shared preference set up in the setup page the battery size in kwh and is pulled.


In the first_launch class is called if the app has never been run before.
It is made up of 2 spinners used to take the make and model of car. The selection of the first spinner sets the options for the second spinner.

The first_launch class is called when the app is first run this is determened with SharedPreference setup being true 

onCheckBoxClicked will pull the gps latitude and longitude using location manager and saves the coordinates to shared Preferences as a float later used in mapMain and chargerInfo.